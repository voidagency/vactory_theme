// Forms
// -----------------------------------------------------------------------------
$blueish-grey: #5A6169 !default;
$input-font-size: .95rem !default;
$input-hover-border-color: darken($input-border-color, 15) !default;

$custom-control-indicator-border: 1px solid $border-color !default;
$custom-checkbox-indicator-transition: transform $transition-duration $ease-in-out-circ, border $transition-duration $ease-in-out-circ !default;
$custom-control-description-disabled-color: $gray-600 !default;
$custom-file-width: 14rem !default;

// Custom toggle
// -----------------------------------------------------------------------------
$custom-toggle-width: 3.125rem !default;
$custom-toggle-height: 1.75rem !default;
$custom-toggle-border-width: 0.0625rem !default;
$custom-toggle-border: $custom-toggle-border-width solid $input-border-color !default;
$custom-toggle-background-color: $white !default;
$custom-toggle-border-radius: 100px !default;

$custom-toggle-focus-box-shadow: 0 .313rem .719rem rgba(theme-color("success"), .1), 0 .156rem .125rem rgba($black, .06) !default;

$custom-toggle-checked-background: theme-color("success") !default;
$custom-toggle-checked-border-color: $custom-toggle-checked-background !default;
$custom-toggle-checked-knob-background: $white !default;

$custom-toggle-knob-width: 1.25rem !default;
$custom-toggle-knob-height: 1.25rem !default;
$custom-toggle-knob-border-radius: 6.25rem !default;
$custom-toggle-knob-active-width: 1.625rem !default;

$custom-toggle-invalid-knob-background-color: #eb8c95 !default;
$custom-toggle-invalid-background-color: $white !default;

$custom-toggle-width-sm: 2.1875rem !default;
$custom-toggle-height-sm: 1.125rem !default;

$custom-toggle-knob-width-sm: .75rem !default;
$custom-toggle-knob-active-width-sm: 1rem !default;
$custom-toggle-knob-height-sm: .75rem !default;


// Custom form controls

// formcheck rtl fix
.form-check {
  @include rtl() {
    padding-right: $form-check-input-gutter;
    padding-left: 0;
  }
}
.form-check-input {
  @include rtl() {
    margin-right: -$form-check-input-gutter;
    margin-left: 0;
  }
}

// form group with fieldset & legend
fieldset.form-group {
  legend {
    font-size: $font-size-base;
    margin-bottom: $label-margin-bottom;
  }
}

// Checkboxes and radios

.custom-control,
.skinned-control.checkbox,
.skinned-control .checkbox,
.skinned-control .radio {
  min-height: (1rem * $line-height-base);
  padding-left: $custom-control-gutter;

  &:hover {
    cursor: pointer;
  }

  .custom-control-label:before,
  label::before {
    pointer-events: all;
  }
  @include rtl() {
    padding-right: $custom-control-gutter;
    padding-left: 0;
  }
}

.custom-control-inline {
  margin-right: $custom-control-spacer-x;
  @include rtl() {
    margin-left: $custom-control-spacer-x;
    margin-right: 0;
  }
}

.custom-control-input,
.skinned-control input[type="radio"],
.skinned-control input[type="checkbox"] {
  position: absolute;
  z-index: 0; // Put the input behind the label so it doesn't overlay text
  opacity: 0;
  margin: 0;
  left: 0;
  width: $custom-control-indicator-size;
  height: $custom-control-indicator-size;

  @include rtl() {
    left: auto;
    right: 0;
  }

  &:hover {
    cursor: pointer;
  }

  &:checked ~ .custom-control-label::before,
  &:checked ~ label::before {
    color: $custom-control-indicator-checked-color;
    border-color: transparent;
    @include gradient-bg($custom-control-indicator-checked-bg);
    @include box-shadow($custom-control-indicator-checked-box-shadow);
  }

  &:focus ~ .custom-control-label::before,
  &:focus ~ label::before {
    // the mixin is not used here to make sure there is feedback
    box-shadow: $custom-control-indicator-focus-box-shadow;
  }

  &:active ~ .custom-control-label::before,
  &:active ~ label::before {
    color: $custom-control-indicator-active-color;
    background-color: $custom-control-indicator-active-bg;
    @include box-shadow($custom-control-indicator-active-box-shadow);
  }

  &:disabled {
    ~ .custom-control-label,
    ~ label {
      color: $custom-control-description-disabled-color; // $custom-control-label-disabled-color

      &:hover {
        cursor: not-allowed;
      }

      &::before {
        background-color: $custom-control-indicator-disabled-bg;
      }
    }

  }
}

// Custom control indicators
//
// Build the custom controls out of psuedo-elements.

.custom-control-label,
.skinned-control.checkbox label,
.skinned-control .checkbox label,
.skinned-control .radio label {
  position: static;

  &:hover {
    cursor: pointer;
  }

  // Background-color and (when enabled) gradient
  &::before {
    position: absolute;
    display: block;
    pointer-events: none;
    content: "";
    user-select: none;
    top: (($line-height-base - $custom-control-indicator-size) / 2);
    left: 0;
    width: $custom-control-indicator-size;
    height: $custom-control-indicator-size;
    background-color: $custom-control-indicator-bg;
    border: $custom-control-indicator-border;
    transition: all 250ms cubic-bezier(.27, .01, .38, 1.06);
    @include box-shadow($custom-control-indicator-box-shadow);
  }

  // Foreground (icon)
  &::after {
    position: absolute;
    content: "";
    display: block;
    top: (($line-height-base - $custom-control-indicator-size) / 2);
    left: -$custom-control-gutter;
    width: $custom-control-indicator-size;
    height: $custom-control-indicator-size;
    background-repeat: no-repeat;
    background-position: center center;
    background-size: $custom-control-indicator-bg-size;
  }

  @include rtl() {
    &::before {
      right: 0;
      left: auto;
    }
    &::after {
      right: -$custom-control-gutter;
      left: auto;
    }
  }
}


// Checkboxes
//
// Tweak just a few things for checkboxes.

.custom-checkbox,
.skinned-control.checkbox,
.skinned-control .checkbox {
  .custom-control-label::before,
  label::before {
    @include border-radius($custom-checkbox-indicator-border-radius);
  }

  .custom-control-label::after,
  label::after {
    content: '';
    position: absolute;
    top: 5px;
    left: 7px;
    width: 5px;
    height: 11px;
    opacity: 0;
    transform: rotate(45deg) scale(0);
    border-right: 2px solid $white;
    border-bottom: 2px solid $white;
    transition: $custom-checkbox-indicator-transition;
    transition-delay: 100ms;

    @include rtl() {
      left: auto;
      right: 7px;
    }
  }

  .custom-control-input:checked ~ .custom-control-label,
  input[type='checkbox']:checked ~ label {
    &::before {
      background-image: none;
    }

    &::after {
      opacity: 1;
      transform: rotate(45deg) scale(1);
      background-image: $custom-checkbox-indicator-icon-checked;
    }
  }

  .custom-control-input:indeterminate ~ .custom-control-label,
  input[type='checkbox']:indeterminate ~ label {
    &::before {
      border: none;
      @include gradient-bg($custom-checkbox-indicator-indeterminate-bg);
      @include box-shadow($custom-checkbox-indicator-indeterminate-box-shadow);
    }

    &::after {
      content: '';
      position: absolute;
      transform: scale(1);
      background-image: $custom-checkbox-indicator-icon-indeterminate;
      background-color: $white;
      border: none;
      width: 10px;
      height: 2px;
      top: 11px;
      left: 4px;
      opacity: 1;
      transition: none;

      @include rtl() {
        left: auto;
        right: 4px;
      }
    }
  }

  .custom-control-input:disabled:checked ~ .custom-control-label,
  input[type='checkbox']:disabled:checked ~ label {
    &::before {
      background: $custom-control-indicator-disabled-bg;
      border-color: $border-color;
    }

    &::after {
      border-color: $border-color;
    }
  }
}

// Radios
//
// Tweak just a few things for radios.

.custom-radio,
.skinned-control .radio {
  .custom-control-label::before,
  label::before {
    border-radius: $custom-radio-indicator-border-radius;
  }

  .custom-control-label::after,
  label::after {
    content: '';
    border-radius: 50%;
    transform: scale(0);
    background-image: none !important;
    position: absolute;
    background: #fff;
    width: 8px;
    height: 8px;
    top: 8px;
    left: 5px;
    transition: all 250ms cubic-bezier(.27, .01, .38, 1.06);
    transition-delay: .1s;
    opacity: 0;
    transform: scale(0);

    @include rtl() {
      left: auto;
      right: 5px;
    }
  }

  .custom-control-input:checked ~ .custom-control-label,
  input[type='radio']:checked ~ label {
    &::before {
      @include gradient-bg($custom-control-indicator-checked-bg);
    }

    &::after {
      opacity: 1;
      transform: scale(1);
    }
  }

  .custom-control-input:disabled,
  input[type='radio']:disabled {
    &:checked ~ .custom-control-label::before,
    &:checked ~ label::before {
      background-color: lighten($blueish-grey, 30%);
    }
  }

  .custom-control-input:disabled:checked ~ .custom-control-label,
  input[type='radio']:disabled:checked ~ label {
    &::before {
      background: $custom-control-indicator-disabled-bg;
      border-color: $border-color;
    }

    &::after {
      background: $border-color;
    }
  }
}

// Select
//
// Replaces the browser default select with a custom one

.custom-select {
  height: $custom-select-height;
  padding: $custom-select-padding-y ($custom-select-padding-x + $custom-select-indicator-padding) $custom-select-padding-y $custom-select-padding-x;
  line-height: $custom-select-line-height;
  color: $custom-select-color;
  background: $custom-select-bg $custom-select-indicator no-repeat right $custom-select-padding-x center;
  background-size: $custom-select-bg-size;
  border: $custom-select-border-width solid $custom-select-border-color;
  font-weight: $font-weight-normal;
  font-size: $input-font-size;

  @include transition($input-transition);

  @if $enable-rounded {
    border-radius: $custom-select-border-radius;
  } @else {
    border-radius: 0;
  }

  &:focus {
    border-color: $custom-select-focus-border-color;
    box-shadow: $custom-select-focus-box-shadow;

    &::-ms-value {
      // For visual consistency with other platforms/browsers,
      // suppress the default white text on blue background highlight given to
      // the selected option text when the (still closed) <select> receives focus
      // in IE and (under certain conditions) Edge.
      // See https://github.com/twbs/bootstrap/issues/19398.
      color: $input-color;
      background-color: $input-bg;
    }
  }

  &:hover:not(:focus):not(:disabled) {
    cursor: pointer;
    border-color: $input-hover-border-color;
  }

  &[multiple],
  &[size]:not([size="1"]) {
    padding-right: $custom-select-padding-x;
  }

  &:disabled {
    color: $custom-select-disabled-color;
    background-color: $custom-select-disabled-bg;
  }
}

.custom-select-sm {
  height: $custom-select-height-sm;
  padding-top: $custom-select-padding-y;
  padding-bottom: $custom-select-padding-y;
  font-size: $custom-select-font-size-sm;
}

.custom-select-lg {
  height: $custom-select-height-lg;
  font-size: $custom-select-font-size-lg;
  padding-top: $custom-select-padding-y;
  padding-bottom: $custom-select-padding-y;
}

// File
//
// Custom file input.

.custom-file {
  position: relative;
  display: inline-block;
  width: 100%;
  height: $custom-file-height;
  margin-bottom: 0;
  font-size: $input-font-size;

  @include transition($input-transition);
}

.custom-file-input {
  position: relative;
  z-index: 2;
  width: 100%;
  min-width: $custom-file-width;
  height: $custom-file-height;
  margin: 0;
  padding: 0;
  opacity: 0;

  &:focus ~ .custom-file-label {
    border-color: $custom-file-focus-border-color;
    color: $input-focus-color;
    box-shadow: $custom-file-focus-box-shadow;

    &::after {
      border-color: $custom-file-focus-border-color;
      color: theme-color("primary");
      background: lighten($custom-file-focus-border-color, 45);
    }

    &:hover {
      border-color: $custom-file-focus-border-color;
    }
  }

  @each $lang, $value in $custom-file-text {
    &:lang(#{$lang}) ~ .custom-file-label::after {
      content: $value;
    }
  }

  &:not(:disabled):hover {
    cursor: pointer;

    & ~ .custom-file-label,
    & ~ .custom-file-label:before {
      border-color: $input-hover-border-color;
    }
  }

  &:disabled + .custom-file-label {
    color: $custom-select-disabled-color;
    background-color: lighten($custom-select-disabled-bg, 5%);
  }
}

.custom-file-label {
  position: absolute;
  top: 0;
  right: 0;
  left: 0;
  z-index: 1;
  height: $custom-file-height;
  padding: $custom-file-padding-x $custom-file-padding-y;
  line-height: $custom-file-line-height;
  color: $custom-file-color;
  background-color: $custom-file-bg;
  border: $custom-file-border-width solid $custom-file-border-color;
  font-weight: $font-weight-normal;
  box-shadow: $custom-file-box-shadow;

  @include transition(box-shadow $transition-duration $ease-in-out-circ, border-color $transition-duration $ease-in-out-circ);
  @include border-radius($custom-file-border-radius);

  &::after {
    position: absolute;
    top: 0;
    right: 0;
    bottom: 0;
    z-index: 3;
    display: block;
    content: "Browse";
    padding: $custom-file-padding-x $custom-file-padding-y;
    // height: $custom-file-height-inner;
    height: 100%;
    line-height: $custom-file-line-height;
    color: $custom-file-button-color;
    border-left: $custom-file-border-width solid $custom-file-border-color;

    @include gradient-bg($custom-file-button-bg);
    @include border-radius(0 $custom-file-border-radius $custom-file-border-radius 0);

    @include rtl() {
      right: auto;
      left: 0;
      border-left: 0;
      border-right: $custom-file-border-width solid $custom-file-border-color;
    }
  }
}

// Custom toggle
.custom-toggle {
  position: relative;
  padding-left: ($custom-toggle-width + 0.625rem);

  @include rtl() {
    padding-right: ($custom-toggle-width + 0.625rem);
    padding-left: 0;
  }

  .custom-control-label {
    // Background
    &::before {
      position: absolute;
      top: 0;
      left: 0;
      display: block;
      width: $custom-toggle-width;
      height: $custom-toggle-height;
      background: $custom-toggle-background-color;
      border-radius: $custom-toggle-border-radius;
      border: $custom-toggle-border;
    }

    // Knob
    &::after {
      content: '';
      position: absolute;
      top: 0.25rem;
      left: 0.25rem;
      width: $custom-toggle-knob-width;
      height: $custom-toggle-knob-height;
      background: $input-border-color;
      border-radius: $custom-toggle-knob-border-radius;
      transition: 350ms;
    }
    @include rtl() {
      &::before {
        right: 0;
        left: auto;
      }
      &::after {
        left: auto;
        right: 0.25rem;
      }
    }
  }

  // Checked state
  .custom-control-input:checked ~ .custom-control-label {
    // Background
    &::before {
      background: $custom-toggle-checked-background;
      border-color: $custom-toggle-checked-border-color;
    }

    // Knob
    &::after {
      left: $custom-toggle-width - $custom-toggle-border-width - 0.1875rem;
      transform: translateX(-100%);
      background: $custom-toggle-checked-knob-background;
      @include rtl() {
        right: $custom-toggle-width - $custom-toggle-border-width - 0.1875rem;
        left: auto;
      }
    }
  }

  // Disabled and checked state
  .custom-control-input:checked:disabled ~ .custom-control-label {
    &::before {
      background: $custom-control-indicator-disabled-bg;
      border-color: $border-color;
    }

    &::after {
      background: $border-color;
    }
  }

  // Active state
  .custom-control-input:active:not(:disabled) ~ .custom-control-label {
    // Knob
    &::after {
      width: $custom-toggle-knob-active-width;
    }
  }

  // Active, but not checked.
  .custom-control-input:active:not(:checked) ~ .custom-control-label {
    &::before {
      background-color: $custom-toggle-background-color;
    }
  }

  // Disabled and active.
  .custom-control-input:disabled:active ~ .custom-control-label {
    &::before {
      background-color: $custom-control-indicator-disabled-bg;
    }
  }

  // Focus state
  .custom-control-input:focus {
    & ~ .custom-control-label {
      &::before {
        box-shadow: $custom-toggle-focus-box-shadow;
      }
    }

    &:not(:checked) ~ .custom-control-label {
      &::before {
        box-shadow: $input-focus-box-shadow;
      }
    }
  }

  &.custom-toggle-sm {
    padding-left: 2.625rem;
    @include rtl() {
      padding-right: 2.625rem;
      padding-left: 0;
    }

    .custom-control-label {
      // Background
      &::before {
        top: .1875rem;
        position: absolute;
        display: block;
        width: $custom-toggle-width-sm;
        height: $custom-toggle-height-sm;
        background: $custom-toggle-background-color;
        border-radius: $custom-toggle-border-radius;
        border: $custom-toggle-border;
      }

      // Knob
      &::after {
        content: '';
        position: absolute;
        top: .375rem;
        left: 0.1875rem;
        width: $custom-toggle-knob-width-sm;
        height: $custom-toggle-knob-height-sm;

        @include rtl() {
          left: auto;
          right: 0.1875rem;
        }
      }
    }

    // Checked state
    .custom-control-input:checked ~ .custom-control-label {
      // Knob
      &::after {
        left: $custom-toggle-width-sm - $custom-toggle-border-width - 0.1875rem;
      }
    }

    // Active state
    .custom-control-input:active:not(:disabled) ~ .custom-control-label {
      // Knob
      &::after {
        width: $custom-toggle-knob-active-width-sm;
        @include rtl() {
          right: $custom-toggle-width-sm - $custom-toggle-border-width - 0.1875rem;
          left: auto;
        }
      }
    }
  }
}

// form validation state
// is-invalid
.form-control {
  &.is-invalid ~ .is-invalid {
    @extend .invalid-feedback;
    // display: block;
  }

  &.is-valid ~ .is-valid {
    @extend .valid-feedback;

  }
}

//checkbox validation style
.form-check-input {
  &.is-invalid {
    ~ label {
      color: $red;
    }
  }

  &.is-valid {
    ~ label {
      color: $green;
    }
  }
}

// skinned bootstrap select validation style
.bootstrap-select {
  .dropdown-toggle {
    &.is-invalid {
      color: $red;
      border-color: $red;
    }

    &.is-valid {
      color: $green;
      border-color: $green;
    }
  }
}

// select validation style {
.select-wrapper {
  &.is-invalid {
    color: $red;
    border-color: $red;
  }

  &.is-valid {
    color: $green;
    border-color: $green;
  }
}

// form with animated label
//
.animated-label {
  position: relative;
  margin-top: 20px;

  input,
  textarea {
    border-top: none;
    border-left: none;
    border-right: none;
    border-radius: 0;

    &::placeholder {
      opacity: 0;
    }

    & ~ label {
      position: absolute;
      top: 10px;
      left: 10px;
      transform-origin: bottom left;
      pointer-events: none;
      transition: all .3s cubic-bezier(0.4, 0, 0.2, 1);

      @include rtl() {
        left: auto;
        right: 10px;
      }
    }

    // input focus state
    &:focus {
      border-color: $input-border-color;
      box-shadow: none;
    }
  }

  input:focus ~ label,
  textarea:focus ~ label,
  label.animated {
    transform: scale(.75) translateY(-50px);
    color: $primary;
  }

  // label style with form validation
  input,
  textarea {
    &.is-invalid {
      box-shadow: none;
      color: $red;

      &:focus {
        box-shadow: none;
      }

      & ~ label {
        color: $red;
      }
    }

    &.is-valid {
      box-shadow: none;
      color: $green;

      &:focus {
        box-shadow: none;
      }

      & ~ label {
        color: $green;
      }
    }
  }

}
