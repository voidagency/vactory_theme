
// Custom toggle
// -----------------------------------------------------------------------------
$custom-toggle-width: 3.125rem !default;
$custom-toggle-height: 1.75rem !default;
$custom-toggle-border-width: 0.0625rem !default;
$custom-toggle-border: $custom-toggle-border-width solid $input-border-color !default;
$custom-toggle-background-color: $white !default;
$custom-toggle-border-radius: 100px !default;

$custom-toggle-focus-box-shadow: 0 .313rem .719rem rgba(theme-color("success"), .1), 0 .156rem .125rem rgba($black, .06) !default;

$custom-toggle-checked-background: theme-color("success") !default;
$custom-toggle-checked-border-color: $custom-toggle-checked-background !default;
$custom-toggle-checked-knob-background: $white !default;

$custom-toggle-knob-width: 1.25rem !default;
$custom-toggle-knob-height: 1.25rem !default;
$custom-toggle-knob-border-radius: 6.25rem !default;
$custom-toggle-knob-active-width: 1.625rem !default;

$custom-toggle-invalid-knob-background-color: #eb8c95 !default;
$custom-toggle-invalid-background-color: $white !default;

$custom-toggle-width-sm: 2.1875rem !default;
$custom-toggle-height-sm: 1.125rem !default;

$custom-toggle-knob-width-sm: .75rem !default;
$custom-toggle-knob-active-width-sm: 1rem !default;
$custom-toggle-knob-height-sm: .75rem !default;

// Custom toggle
.custom-toggle {
  position: relative;
  padding-left: ($custom-toggle-width + 0.625rem);

  @include rtl() {
    padding-right: ($custom-toggle-width + 0.625rem);
    padding-left: 0;
  }

  .custom-control-label {
    // Background
    &::before {
      position: absolute;
      top: 0;
      left: 0;
      display: block;
      width: $custom-toggle-width;
      height: $custom-toggle-height;
      background: $custom-toggle-background-color;
      border-radius: $custom-toggle-border-radius;
      border: $custom-toggle-border;
    }

    // Knob
    &::after {
      content: '';
      position: absolute;
      top: 0.25rem;
      left: 0.25rem;
      width: $custom-toggle-knob-width;
      height: $custom-toggle-knob-height;
      background: $input-border-color;
      border-radius: $custom-toggle-knob-border-radius;
      transition: 350ms;
    }
    @include rtl() {
      &::before {
        right: 0;
        left: auto;
      }
      &::after {
        left: auto;
        right: 0.25rem;
      }
    }
  }

  // Checked state
  .custom-control-input:checked ~ .custom-control-label {
    // Background
    &::before {
      background: $custom-toggle-checked-background;
      border-color: $custom-toggle-checked-border-color;
    }

    // Knob
    &::after {
      left: $custom-toggle-width - $custom-toggle-border-width - 0.1875rem;
      transform: translateX(-100%);
      background: $custom-toggle-checked-knob-background;
      @include rtl() {
        right: $custom-toggle-width - $custom-toggle-border-width - 0.1875rem;
        left: auto;
      }
    }
  }

  // Disabled and checked state
  .custom-control-input:checked:disabled ~ .custom-control-label {
    &::before {
      background: $custom-control-indicator-disabled-bg;
      border-color: $border-color;
    }

    &::after {
      background: $border-color;
    }
  }

  // Active state
  .custom-control-input:active:not(:disabled) ~ .custom-control-label {
    // Knob
    &::after {
      width: $custom-toggle-knob-active-width;
    }
  }

  // Active, but not checked.
  .custom-control-input:active:not(:checked) ~ .custom-control-label {
    &::before {
      background-color: $custom-toggle-background-color;
    }
  }

  // Disabled and active.
  .custom-control-input:disabled:active ~ .custom-control-label {
    &::before {
      background-color: $custom-control-indicator-disabled-bg;
    }
  }

  // Focus state
  .custom-control-input:focus {
    & ~ .custom-control-label {
      &::before {
        box-shadow: $custom-toggle-focus-box-shadow;
      }
    }

    &:not(:checked) ~ .custom-control-label {
      &::before {
        box-shadow: $input-focus-box-shadow;
      }
    }
  }

  &.custom-toggle-sm {
    padding-left: 2.625rem;
    @include rtl() {
      padding-right: 2.625rem;
      padding-left: 0;
    }

    .custom-control-label {
      // Background
      &::before {
        top: .1875rem;
        position: absolute;
        display: block;
        width: $custom-toggle-width-sm;
        height: $custom-toggle-height-sm;
        background: $custom-toggle-background-color;
        border-radius: $custom-toggle-border-radius;
        border: $custom-toggle-border;
      }

      // Knob
      &::after {
        content: '';
        position: absolute;
        top: .375rem;
        left: 0.1875rem;
        width: $custom-toggle-knob-width-sm;
        height: $custom-toggle-knob-height-sm;

        @include rtl() {
          left: auto;
          right: 0.1875rem;
        }
      }
    }

    // Checked state
    .custom-control-input:checked ~ .custom-control-label {
      // Knob
      &::after {
        left: $custom-toggle-width-sm - $custom-toggle-border-width - 0.1875rem;
      }
    }

    // Active state
    .custom-control-input:active:not(:disabled) ~ .custom-control-label {
      // Knob
      &::after {
        width: $custom-toggle-knob-active-width-sm;
        @include rtl() {
          right: $custom-toggle-width-sm - $custom-toggle-border-width - 0.1875rem;
          left: auto;
        }
      }
    }
  }
}
